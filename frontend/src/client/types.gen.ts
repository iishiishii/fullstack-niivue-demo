// This file is auto-generated by @hey-api/openapi-ts

export type AuthorizationError = {
    detail: string;
};

export type Body_upload_create_scene_with_uploaded_files = {
    files: Array<((Blob | File))>;
    scene_title?: string;
};

export type Body_upload_upload_files = {
    files: Array<((Blob | File))>;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type HubApiError = {
    detail: HubResponse;
};

export type HubResponse = {
    msg: string;
    request_url: string;
    token: string;
    response_code: number;
    hub_response: {
        [key: string]: unknown;
    };
};

export type Message = {
    message: string;
};

/**
 * Enum for scene processing status values.
 */
export type ProcessingStatus = 'pending' | 'processing' | 'completed' | 'failed';

export type SceneCreate = {
    timestamp?: string;
    nv_document: {
        [key: string]: unknown;
    };
    tool_name?: (string | null);
    status?: ProcessingStatus;
    result?: ({
    [key: string]: unknown;
} | null);
    error?: (string | null);
};

export type ScenePublic = {
    timestamp?: string;
    nv_document: {
        [key: string]: unknown;
    };
    tool_name?: (string | null);
    status?: ProcessingStatus;
    result?: ({
    [key: string]: unknown;
} | null);
    error?: (string | null);
    id: string;
    owner_id: string;
};

export type ScenesPublic = {
    data: Array<ScenePublic>;
    count: number;
};

export type SceneUpdate = {
    timestamp?: string;
    nv_document?: ({
    [key: string]: unknown;
} | null);
    tool_name?: (string | null);
    status?: (ProcessingStatus | null);
    result?: ({
    [key: string]: unknown;
} | null);
    error?: (string | null);
};

export type User = {
    name?: string;
    admin?: boolean;
    groups?: (Array<(string)> | null);
    pending?: (string | null);
    last_activity?: string;
    scopes?: Array<(string)>;
    id?: string;
    hashed_password: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type HubLoginResponse = (unknown);

export type HubIndexResponse = (unknown);

export type HubMeResponse = (User);

export type HubDebugResponse = (unknown);

export type ScenesReadScenesData = {
    status?: (ProcessingStatus | null);
};

export type ScenesReadScenesResponse = (ScenesPublic);

export type ScenesCreateSceneData = {
    requestBody: SceneCreate;
};

export type ScenesCreateSceneResponse = (ScenePublic);

export type ScenesDeleteAllScenesResponse = (Message);

export type ScenesReadSceneData = {
    id: string;
};

export type ScenesReadSceneResponse = (ScenePublic);

export type ScenesCreateAndProcessSceneData = {
    id: string;
    requestBody: SceneUpdate;
};

export type ScenesCreateAndProcessSceneResponse = (ScenePublic);

export type ScenesDeleteSceneData = {
    id: string;
};

export type ScenesDeleteSceneResponse = (Message);

export type UploadListUploadedFilesResponse = ({
    [key: string]: unknown;
});

export type UploadUploadFilesData = {
    formData: Body_upload_upload_files;
};

export type UploadUploadFilesResponse = ({
    [key: string]: unknown;
});

export type UploadCreateSceneWithUploadedFilesData = {
    formData: Body_upload_create_scene_with_uploaded_files;
};

export type UploadCreateSceneWithUploadedFilesResponse = (ScenePublic);

export type UploadDeleteUploadedFileData = {
    filename: string;
};

export type UploadDeleteUploadedFileResponse = ({
    [key: string]: unknown;
});

export type UtilsHealthCheckResponse = (boolean);