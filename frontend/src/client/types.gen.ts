// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_upload_create_scene_with_uploaded_files = {
    files: Array<((Blob | File))>;
    scene_title?: string;
};

export type Body_upload_upload_files = {
    files: Array<((Blob | File))>;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

/**
 * Enum for scene processing status values.
 */
export type ProcessingStatus = 'pending' | 'processing' | 'completed' | 'failed';

export type SceneCreate = {
    timestamp?: string;
    nv_document: {
        [key: string]: unknown;
    };
    tool_name?: (string | null);
    status?: ProcessingStatus;
    result?: ({
    [key: string]: unknown;
} | null);
    error?: (string | null);
};

export type ScenePublic = {
    timestamp?: string;
    nv_document: {
        [key: string]: unknown;
    };
    tool_name?: (string | null);
    status?: ProcessingStatus;
    result?: ({
    [key: string]: unknown;
} | null);
    error?: (string | null);
    id: string;
    owner_id: string;
};

export type ScenesPublic = {
    data: Array<ScenePublic>;
    count: number;
};

export type SceneUpdate = {
    timestamp?: string;
    nv_document?: ({
    [key: string]: unknown;
} | null);
    tool_name?: (string | null);
    status?: (ProcessingStatus | null);
    result?: ({
    [key: string]: unknown;
} | null);
    error?: (string | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    first_name?: (string | null);
    last_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    first_name?: (string | null);
    last_name?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginIndexResponse = (unknown);

export type LoginDebugResponse = (unknown);

export type ScenesReadScenesData = {
    status?: (ProcessingStatus | null);
};

export type ScenesReadScenesResponse = (ScenesPublic);

export type ScenesCreateSceneData = {
    requestBody: SceneCreate;
};

export type ScenesCreateSceneResponse = (ScenePublic);

export type ScenesDeleteAllScenesResponse = (Message);

export type ScenesReadSceneData = {
    id: string;
};

export type ScenesReadSceneResponse = (ScenePublic);

export type ScenesCreateAndProcessSceneData = {
    id: string;
    requestBody: SceneUpdate;
};

export type ScenesCreateAndProcessSceneResponse = (ScenePublic);

export type ScenesDeleteSceneData = {
    id: string;
};

export type ScenesDeleteSceneResponse = (Message);

export type UploadListUploadedFilesResponse = ({
    [key: string]: unknown;
});

export type UploadUploadFilesData = {
    formData: Body_upload_upload_files;
};

export type UploadUploadFilesResponse = ({
    [key: string]: unknown;
});

export type UploadCreateSceneWithUploadedFilesData = {
    formData: Body_upload_create_scene_with_uploaded_files;
};

export type UploadCreateSceneWithUploadedFilesResponse = (ScenePublic);

export type UploadDeleteUploadedFileData = {
    filename: string;
};

export type UploadDeleteUploadedFileResponse = ({
    [key: string]: unknown;
});

export type UsersReadUserMeResponse = (UserPublic);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersVerifyEmailData = {
    code: string;
    email: string;
};

export type UsersVerifyEmailResponse = (Message);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UtilsHealthCheckResponse = (boolean);