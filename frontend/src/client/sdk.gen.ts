// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ScenesReadScenesData, ScenesReadScenesResponse, ScenesCreateAndProcessSceneData, ScenesCreateAndProcessSceneResponse, ScenesReadSceneData, ScenesReadSceneResponse, ScenesCreateSceneData, ScenesCreateSceneResponse, UtilsHealthCheckResponse } from './types.gen';

export class ScenesService {
    /**
     * Read Scenes
     * Get scenes with optional filtering by status.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.status
     * @returns ScenesPublic Successful Response
     * @throws ApiError
     */
    public static readScenes(data: ScenesReadScenesData = {}): CancelablePromise<ScenesReadScenesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/scenes/',
            query: {
                skip: data.skip,
                limit: data.limit,
                status: data.status
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create And Process Scene
     * Create a new scene and process images using niimath operation.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ScenePublic Successful Response
     * @throws ApiError
     */
    public static createAndProcessScene(data: ScenesCreateAndProcessSceneData): CancelablePromise<ScenesCreateAndProcessSceneResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/scenes/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Scene
     * Get scene by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ScenePublic Successful Response
     * @throws ApiError
     */
    public static readScene(data: ScenesReadSceneData): CancelablePromise<ScenesReadSceneResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/scenes/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Scene
     * Create a new scene without processing.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ScenePublic Successful Response
     * @throws ApiError
     */
    public static createScene(data: ScenesCreateSceneData): CancelablePromise<ScenesCreateSceneResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/scenes/create',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}