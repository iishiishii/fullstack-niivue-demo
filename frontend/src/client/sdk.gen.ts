// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ScenesReadScenesData, ScenesReadScenesResponse, ScenesCreateSceneData, ScenesCreateSceneResponse, ScenesDeleteAllScenesResponse, ScenesReadSceneData, ScenesReadSceneResponse, ScenesCreateAndProcessSceneData, ScenesCreateAndProcessSceneResponse, ScenesDeleteSceneData, ScenesDeleteSceneResponse, UploadListUploadedFilesResponse, UploadUploadFilesData, UploadUploadFilesResponse, UploadCreateSceneWithUploadedFilesData, UploadCreateSceneWithUploadedFilesResponse, UploadDeleteUploadedFileData, UploadDeleteUploadedFileResponse, UtilsHealthCheckResponse } from './types.gen';

export class ScenesService {
    /**
     * Read Scenes
     * Get scenes with optional filtering by status.
     * @param data The data for the request.
     * @param data.status
     * @returns ScenesPublic Successful Response
     * @throws ApiError
     */
    public static readScenes(data: ScenesReadScenesData = {}): CancelablePromise<ScenesReadScenesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/scenes/',
            query: {
                status: data.status
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Scene
     * Create a new scene without processing.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ScenePublic Successful Response
     * @throws ApiError
     */
    public static createScene(data: ScenesCreateSceneData): CancelablePromise<ScenesCreateSceneResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/scenes/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete All Scenes
     * Delete all scenes.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteAllScenes(): CancelablePromise<ScenesDeleteAllScenesResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/scenes/'
        });
    }
    
    /**
     * Read Scene
     * Get scene by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ScenePublic Successful Response
     * @throws ApiError
     */
    public static readScene(data: ScenesReadSceneData): CancelablePromise<ScenesReadSceneResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/scenes/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create And Process Scene
     * Update a scene with processing tool and process images using niimath operation.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ScenePublic Successful Response
     * @throws ApiError
     */
    public static createAndProcessScene(data: ScenesCreateAndProcessSceneData): CancelablePromise<ScenesCreateAndProcessSceneResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/scenes/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Scene
     * Delete an scene.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteScene(data: ScenesDeleteSceneData): CancelablePromise<ScenesDeleteSceneResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/scenes/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UploadService {
    /**
     * List Uploaded Files
     * List all uploaded files.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static listUploadedFiles(): CancelablePromise<UploadListUploadedFilesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/upload/files'
        });
    }
    
    /**
     * Upload Files
     * Upload multiple medical image files and return their URLs.
     * This endpoint handles file storage and returns URLs that can be used
     * with the scenes endpoints for processing.
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static uploadFiles(data: UploadUploadFilesData): CancelablePromise<UploadUploadFilesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/upload/files',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Scene With Uploaded Files
     * Upload files and immediately create a scene with them.
     * This is a convenience endpoint that combines file upload and scene creation.
     * @param data The data for the request.
     * @param data.formData
     * @returns ScenePublic Successful Response
     * @throws ApiError
     */
    public static createSceneWithUploadedFiles(data: UploadCreateSceneWithUploadedFilesData): CancelablePromise<UploadCreateSceneWithUploadedFilesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/upload/scene-with-files',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Uploaded File
     * Delete an uploaded file from the server.
     * @param data The data for the request.
     * @param data.filename
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteUploadedFile(data: UploadDeleteUploadedFileData): CancelablePromise<UploadDeleteUploadedFileResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/upload/files/{filename}',
            path: {
                filename: data.filename
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}